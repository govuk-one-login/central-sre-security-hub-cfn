AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31

Description: >-
  This cloudformation template creates the necessary components to deploy an ECS Cluster, API Gateway 
  and CloudFront Distribution. When used, this template will deploy a single ECS cluster for multiple Tasks/Services.

Parameters:
  Environment:
    Description: "The name of the environment you are deploying into and the value for the tag environment to be added to all your resources."
    Type: String
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  
  Product:
    Description: "Tag all of your resources with the product name."
    Type: String
    Default: GOV.UK

  Owner:
    Description: "Tag all of your resources with the team name."
    Type: String
    Default: Central-SRE

  System:
    Description: "Tag all of your resources with the service name."
    Type: String
    Default: Central-SRE-test-service

  Source: 
    Description: "Tag the repository where your CloudFormation template is." 
    Type: String
    Default: "" 
  
  PermissionsBoundaryArn: 
    Description: "The ARN of the permissions boundary to apply to any role created by the template."
    Type: String
    Default: "none"

  AlertingTopicARN: 
    Description: "The ARN of the alerting topic."
    Type: String
    Default: "" 

  APIGateWayLatencyAlertThreshold:
    Description: "The threshold for the API Gateway Latency, which equals 1 second."
    Type: Number 
    Default: 1000

  LoggingBucket:
    Description: "The name of the logging bucket to be used by the CloudFront Distribution."
    Type: String 
    
  BaseUrl:
    Description: "The Base URL for this environment."
    Type: String 
  
  UseFargateSpot:
    Description: "Use Fargate Spot instances."
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

  UpdateReplacePolicy: 
    Description: "Attribute to retain or, in some cases, backup the existing physical instance of a resource when it is replaced during a stack update operation."
    Type: String
    Default: "Delete"
    AllowedValues:
      - "Retain"
      - "Delete"
    
  DeletionPolicy: 
    Description: "Attribute you can preserve, and in some cases, backup a resource when its stack is deleted."
    Type: String
    Default: "Delete"
    AllowedValues:
      - "Retain"
      - "Delete"

  RetentionInDays: 
    Description: "The retention in days for the ECS Logs."
    Type: Number 
    Default: 30

  LoggingDestinationArn: 
    Description: "The ARN to send the ECS Access Logs."
    Type: String
    Default: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]

  HasAlertingTopicArn: !Not [!Equals ["", !Ref AlertingTopicARN]] 

  CreateAlerts: !And 
    - !Condition IsNotDevelopment
    - !Condition HasAlertingTopicArn
     
  UsePermissionsBoundaryArn:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundaryArn
          - "none"

  IfUseFargateSpot: 
    Fn::Equals:
      - !Ref UseFargateSpot
      - "Yes"

Resources:
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encypting the lambda resources.
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "sqs.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: StackName
          Value: !Sub "${AWS::StackName}"
        - Key: Product
          Value: !Ref Product
        - Key: System
          Value: !Ref System
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Source
          Value: "govuk-one-login/central-sre-security-hub-cfn/service_catalog_profiles/storage/s3/elb-access-logs-bucket.yaml"

  KeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref KmsKey

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub "${AWS::StackName}-ECSCluster"
      CapacityProviders: !If
      - IfUseFargateSpot 
      - - FARGATE_SPOT
      - - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !If
          - IfUseFargateSpot
          - FARGATE_SPOT
          - FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product 
          Value: !Ref Product
        - Key: System
          Value: !Ref System
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner
        - Key: Source
          Value: !Ref Source

  ECSAccessLogsGroup:
    UpdateReplacePolicy: !Ref UpdateReplacePolicy
    DeletionPolicy: !Ref DeletionPolicy
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}/${System}/${Environment}-ECS
      RetentionInDays: !Ref RetentionInDays
      KmsKeyId: !GetAtt KmsKey.Arn

  ECSAccessLogsGroupSubscriptionFilterCSLS: 
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref LoggingDestinationArn
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSFatalErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: CreateAlerts 
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "ECSFatalerror-message"
  
  ECSFatalErrorAlarm:
    DependsOn: 
      - "ECSFatalErrorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlerts
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ECSFatalErrorAlarm"
      AlarmDescription: !Sub "Triggers an alarm when Fatal Error occurs"
      ActionsEnabled: true
      OKActions:
        - !Ref AlertingTopicARN
      AlarmActions:
        - !Ref AlertingTopicARN
      InsufficientDataActions: [ ]
      MetricName: ECSFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
  
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      PermissionsBoundary: !If
        - UsePermissionsBoundaryArn
        - !Ref PermissionsBoundaryArn
        - !Ref AWS::NoValue

  ECSTaskExecutionPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-ECSTaskExecutionPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetAuthorizationToken"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !GetAtt "ECSAccessLogsGroup.Arn"
              - !Sub "${ECSAccessLogsGroup.Arn}:*"
      RoleName: !Ref ECSTaskExecutionRole

  DynatraceGetSecretsPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: DynatraceGetSecrets
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DynatraceNonProductionVariables*"
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DynatraceProductionVariables*"
          - Effect: Allow
            Action:
              - "secretsmanager:ListSecrets" 
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource:
              - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
      RoleName: !Ref ECSTaskExecutionRole

  ApiGwHttpEndpoint:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${System}-front-${Environment}-API"
      ProtocolType: HTTP
      Tags: 
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Product: !Ref Product
        System: !Ref System
        Environment: !Ref Environment
        Owner: !Ref Owner
        Source: !Ref Source

  APIGWAccessLogsGroup:
    UpdateReplacePolicy: !Ref UpdateReplacePolicy
    DeletionPolicy: !Ref DeletionPolicy
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${System}-${Environment}-API-GW-AccessLogs
      RetentionInDays: !Ref RetentionInDays
      KmsKeyId: !GetAtt KmsKey.Arn

  APIGWAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  APIGWFatalErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: CreateAlerts
    Properties:
      LogGroupName: !Ref APIGWAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "APIGWFatalerror-message"

  APIGWFatalErrorAlarm:
    Condition: CreateAlerts
    DependsOn: 
      - "APIGWFatalErrorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-APIGWFatalErrorAlarm"
      AlarmDescription: !Sub "Triggers an alarm when Fatal Error occurs"
      ActionsEnabled: true
      OKActions:
        - !Ref AlertingTopicARN
      AlarmActions:
        - !Ref AlertingTopicARN
      InsufficientDataActions: [ ]
      MetricName: APIGWFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  APIGWManagedLogsAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGWManagedLogsRole.Arn

  APIGWManagedLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: APIGWManagedLogsRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: 2012-10-17

  APIGWManagedLogsPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-APIGWManagedLogsPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:*"
            Resource:
              - "*"
      RoleName: !Ref APIGWManagedLogsRole

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref BaseUrl
        CNAMEs:
          - !Ref BaseUrl
        Comment: !Sub "CloudFront Distribution resource for the ${AWS::StackName} application"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          # CachingDisabled managed cache policy id
          # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policies-list
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: !GetAtt CloudFrontOriginRequestPolicy.Id
          Compress: false
          MinTTL: 0
          TargetOriginId: !Ref BaseUrl
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: "http2"
        Logging:
          Bucket: !Sub "${LoggingBucket}.s3.amazonaws.com"
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            Id: !Ref BaseUrl
            CustomOriginConfig:
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - TLSv1.2
        ViewerCertificate:
          AcmCertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/Global/Certificate/Home/ARN}}"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        WebACLId: !Sub "{{resolve:ssm:/${Environment}/Platform/WAF/Global/ACL/ARN}}"

  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: String
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allViewer
        Name: !Sub "${AWS::StackName}-OriginRequestPolicy"
        QueryStringsConfig:
          QueryStringBehavior: all

  AppFrontCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref BaseUrl
      DomainNameConfigurations:
        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/HostedZone/Certificate/Home/ARN}}"
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2
      Tags:
          Product: !Ref Product 
          System: !Ref System
          Environment: !Ref Environment
          Owner: !Ref Owner
          Source: !Ref Source

  AppFrontApiRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref BaseUrl
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/HostedZone/Home}}"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        HostedZoneId: "Z2FDTNDATAQYW2"
        EvaluateTargetHealth: false
  
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-Api"
      ProtocolType: HTTP
      Tags:
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Product: !Ref Product 
        System: !Ref System
        Environment: !Ref Environment
        Owner: !Ref Owner
        Source: !Ref Source

  ApiGateway4xxStatusAlarm:
    Condition: CreateAlerts
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ApiGateway4xxStatusAlarm"
      AlarmDescription: "Trigger the alarm if errorThreshold exceeds 1% with the minimum of 10 invocations in 2 out of the last 5 minutes"
      ActionsEnabled: false
      AlarmActions:
        - !Ref AlertingTopicARN
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      TreatMissingData: missing
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Sum

  ApiGateway5xxStatusAlarm:
    Condition: CreateAlerts
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ApiGateway5xxStatusAlarm"
      AlarmDescription: "Trigger the alarm if errorThreshold exceeds 1% with the minimum of 10 invocations in 2 out of the last 5 minutes"
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlertingTopicARN
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      TreatMissingData: missing
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Sum

  ApiGatewayLatencyAlarm:
    Condition: CreateAlerts
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ApiGatewayLatencyAlarm"
      AlarmDescription: "Trigger the alarm if response latency exceeds 2.5 seconds with the minimum of 10 invocations in 2 out of the last 5 minutes"
      ActionsEnabled: false
      AlarmActions:
        - !Ref AlertingTopicARN
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: !Ref APIGateWayLatencyAlertThreshold
      TreatMissingData: missing
      Metrics:
        - Id: safeLatency
          Label: safeLatency
          ReturnData: true
          Expression: IF(invocations<10,0,maxLatency)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Sum
        - Id: maxLatency
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGateway
            Period: 60
            Stat: Maximum

  AppFrontApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref BaseUrl
      ApiId: !Ref ApiGateway
      Stage: !Ref ApiDefaultStage
    DependsOn:
      - AppFrontCustomDomain

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: >-
          {
          "requestId":"$context.requestId",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "domainName":"$context.domainName",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "protocol":"$context.protocol",
          "status":"$context.status",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency",
          "integrationStatus":"$context.integrationStatus",
          "integrationLatency":"$context.integrationLatency"
          "integrationErrorMessage":"$context.integrationErrorMessage",
          "errorMessage":"$context.error.message",
          "errorResponseType":"$context.error.responseType"
          }
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
    DependsOn:
      - ApiGatewayLoggingRole
      - ApiGatewayAccount
      # Tags: 
        # - Key: Name
        #   Value: !Sub "${AWS::StackName}-ApiDefaultStage"
        # - Key: Product 
        #   Value: !Ref Product
        # - Key: System
        #   Value: !Ref System
        # - Key: Environment
        #   Value: !Ref Environment
        # - Key: Owner
        #   Value: !Ref Owner
        # - Key: Source
        #   Value: !Ref Source
        # - Product: !Ref Product 

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
            
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

Outputs:
  ECSClusterName:
    Description: "The name of the ECS Cluster."
    Value: !Sub "${AWS::StackName}-ECSCluster"

  ECSAccessLogsGroupName:
    Description: "The name of the ECS Access Logs Group."
    Value: !Sub "${AWS::StackName}/${System}/${Environment}-ECS"

  ECSAccessLogsGroupArn:
    Description: "The ARN to send the ECS Access Logs."
    Value: !Sub "${AWS::StackName}/${System}/${Environment}-ECS"

  ECSTaskExecutionRoleArn:
    Description: "The ARN for the ECS Task Execution Role"
    Value: !Ref ECSTaskExecutionRole

  ApiGatewayId:
    Description: "The API Gateway Id"
    Value: !Sub "${System}-front-${Environment}-API"

  ApiGatewayEndpoint:
    Description: "The URL for the application's API Gateway."
    Value: !GetAtt ApiGateway.ApiEndpoint
  
  CloudFrontDistributionEndpoint:
    Description: "The Application URL."
    Value: !Ref Environment
